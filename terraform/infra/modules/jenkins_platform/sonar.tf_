data "template_file" sonar_container_def {
  template = file("${path.module}/templates/sonarqube.json.tpl")

  vars = {
    name                = "${var.name_prefix}-sonar"
    jenkins_controller_port = var.jenkins_controller_port
    jnlp_port           = var.jenkins_jnlp_port
    source_volume       = "${var.name_prefix}-efs"
    jenkins_home        = "/var/jenkins_home"
    container_image     = var.sonarqube_image
    region              = local.region
    account_id          = local.account_id  
    log_group           = aws_cloudwatch_log_group.sonar_log_group.name
    memory              = var.jenkins_controller_memory
    cpu                 = var.jenkins_controller_cpu
  }
}

resource "aws_security_group" sonar_security_group {
  name        = "${var.name_prefix}-sonar"
  description = "${var.name_prefix} Sonarqube security group"
  vpc_id      = var.vpc_id

  ingress {
    protocol        = "tcp"
    self            = true
    security_groups = var.alb_create_security_group ? [aws_security_group.alb_security_group[0].id] : var.alb_security_group_ids
    from_port       = 9000
    to_port         = 9000
    description     = "Communication channel to Sonarqube"
  }

  egress {
    protocol    = "-1"
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = var.tags
}

resource "aws_lb_target_group" sonar {
  name        = replace("${var.name_prefix}-sonar", "_", "-")
  port        = 9000
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "ip"

  health_check {
    enabled = true
    path    = "/"
  }

  tags       = var.tags
  depends_on = [aws_lb.this]

  lifecycle {
    create_before_destroy = true
  }
}
