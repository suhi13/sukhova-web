#!groovy

node ('ec2-builder'){
    //currentBuild.displayName = "#${BUILD_NUMBER}"
    def apiRepositoryUrl        = "https://github.com/shopizer-ecommerce/shopizer.git"
    def feRepositoryUrl         = "https://github.com/shopizer-ecommerce/shopizer-shop-reactjs.git"
    def terraformRepositoryUrl  = "https://github.com/suhi13/sukhova-web.git"
    def mavenImage              = "maven:3.8.1-adoptopenjdk-11"
    def branch                  = "master"
    def dockerEcr               = "623550112002.dkr.ecr.eu-central-1.amazonaws.com"
    
    stage('Git checkout') {
        dir('api') {
            checkoutRepository(apiRepositoryUrl, branch)
        }
        dir('fe') {
            checkoutRepository(feRepositoryUrl, branch)
        }
        dir('infra') {
            checkoutRepository(terraformRepositoryUrl, 'development')
        }
    }

/*
    stage('SonarQube analysis') {
        def scannerHome = tool 'SonarScanner 4.0';
        withSonarQubeEnv() {
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=myapp"
        }
    }
	
    stage("SonarQube Quality Gate") {
        waitForQualityGate abortPipeline: true
    }
*/

    stage('Terraform deploy') {
        dir('infra/terraform/app') {
            terraformPerform('apply')
        }
    }


    stage('Build/Push API') {
        def repositoryName  = "shopizer-api"
        def dockerImageName = "${dockerEcr}/${repositoryName}:${env.BUILD_ID}"

        docker.image(mavenImage).inside() {
            dir('api'){
                sh "mvn clean install"
            }   
        }

        docker.withRegistry("https://${dockerEcr}", "ecr:eu-central-1:${repositoryName}") {
            def image = docker.build(dockerImageName, "./sm-shop")
            pushImage(image)
            //app.push() 
        }
    }

/*
    stage('Build Frontend') {
        def repositoryName  = "shopizer-frontend"
        def dockerImageName = "${dockerEcr}/${repositoryName}"        
        dir('fe') {
            app = docker.build(dockerImageName, "./")
        }
    }
*/

/*
    stage('OWASP ZAP analysis') {
        sh "docker run -t owasp/zap2docker-stable zap-baseline.py -t http://192.168.0.197 || true"
    }

    stage ('Generate BOM') {
        sh 'mvn org.cyclonedx:cyclonedx-maven-plugin:makeBom'
    }

    stage ('Dependency Tracker') {
        dependencyTrackPublisher artifact: 'target/bom.xml', projectId: '9812e933-6bc1-4453-951f-9a75a7d693b5', synchronous: true
    }
*/    
}

def checkoutRepository(repoUrl, branch = 'master') {
    checkout([
        $class: "GitSCM",
        doGenerateSubmoduleConfigurations: false, 
        submoduleCfg: [],       
        userRemoteConfigs:[
            [
                url: repoUrl
            ]
        ],
        branches:[[ name: branch]]
    ])
}

def terraformPerform(action) {
        timeout(time: 1, unit: 'HOURS') {
            ansiColor('xterm') {
                timestamps {
                    sh "terraform init"
                    sh "terraform validate"
                    sh "terraform ${action} -auto-approve"
                }
            }
        }
}

def pushImage(image) {
    sh("set +x; eval \$(aws ecr get-login --region=eu-central-1 --no-include-email | sed 's|https://||')")
    image.push()
}