#!groovy

node ('ec2-builder'){
    //currentBuild.displayName = "#${BUILD_NUMBER}"
    def apiRepositoryUrl        = "https://github.com/shopizer-ecommerce/shopizer.git"
    def feRepositoryUrl         = "https://github.com/shopizer-ecommerce/shopizer-shop-reactjs.git"
    def terraformRepositoryUrl  = "https://github.com/suhi13/sukhova-web.git"
    def mavenImage              = "maven:3.8.1-adoptopenjdk-11"
    def awsRegion               = "eu-central-1"
    def dockerEcr               = "623550112002.dkr.ecr.${awsRegion}.amazonaws.com"
    def imageTag                = env.BUILD_NUMBER
    def varsMap = [
        image_tag: imageTag
    ]
    
    stage('Git checkout') {
        dir('api') {
            checkoutRepository(apiRepositoryUrl, 'master')
        }
        dir('fe') {
            checkoutRepository(feRepositoryUrl, 'main')
        }
        dir('infra') {
            checkoutRepository(terraformRepositoryUrl, 'development')
        }
    }

    stage('SonarQube analysis') {
        def scannerHome = tool 'sonar_scanner';
        dir('api') {
            withSonarQubeEnv('SonarQube') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=shopizer-api -Dsonar.java.binaries=."
            }
        }
        dir('fe') {
            withSonarQubeEnv('SonarQube') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=shopizer-frontend"
            }
        }
    }
	
    stage("SonarQube Quality Gate") {
        waitForQualityGate abortPipeline: true
    }

    stage('Terraform deploy') {
        dir('infra/terraform/app') {
            terraformPerform('apply', varsMap)
        }
    }

    stage('Build/Push API') {
        def repositoryName  = "shopizer-api"
        def dockerImageName = "${dockerEcr}/${repositoryName}:${imageTag}"

        dir('api'){
            docker.image(mavenImage).inside() {
                sh "mvn clean install"
            }   
            def image = docker.build(dockerImageName, "./sm-shop")
            pushImage(image)
        }
    }

    stage('Build/Push Frontend') {
        def repositoryName  = "shopizer-frontend"
        def dockerImageName = "${dockerEcr}/${repositoryName}:${imageTag}"        
        dir('fe') {
            def image = docker.build(dockerImageName, "./")
            pushImage(image)
        }
    }

/*
    stage('OWASP ZAP analysis') {
        sh "docker run -t owasp/zap2docker-stable zap-baseline.py -t http://192.168.0.197 || true"
    }

    stage ('Generate BOM') {
        sh 'mvn org.cyclonedx:cyclonedx-maven-plugin:makeBom'
    }

    stage ('Dependency Tracker') {
        dependencyTrackPublisher artifact: 'target/bom.xml', projectId: '9812e933-6bc1-4453-951f-9a75a7d693b5', synchronous: true
    }
*/    
}

def checkoutRepository(repoUrl, branch) {
    checkout([
        $class: "GitSCM",
        doGenerateSubmoduleConfigurations: false, 
        submoduleCfg: [],       
        userRemoteConfigs:[[ url: repoUrl ]],
        branches:[[ name: branch]]
    ])
}

def terraformPerform(action, varsMap) {
    String vars = ""
    varsMap.each{itemKey,itemValue->
        vars = vars + " -var '${itemKey}=${itemValue}'"    
    }
    timeout(time: 1, unit: 'HOURS') {
        ansiColor('xterm') {
            timestamps {
                sh "terraform init"
                sh "terraform validate"
                sh "terraform ${action} -auto-approve ${vars}"
            }
        }
    }
}

def pushImage(image) {
    withAWS(useNode: true) {    
        sh("set +x; eval \$(aws ecr get-login --region=eu-central-1 --no-include-email | sed 's|https://||')")
        image.push()
    }
}